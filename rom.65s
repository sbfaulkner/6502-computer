;***************************************************************************************************
; Addresses AND constants

PORTB   = $6000
PORTA   = $6001
DDRB    = $6002
DDRA    = $6003
; T1CL    = $6004
; T1CH    = $6005
; T1LL    = $6006
; T1LH    = $6007
; T2CL    = $6008
; T2CH    = $6009
; SR      = $600A
; ACR     = $600B
PCR     = $600C
IFR     = $600D
IER     = $600E
; PORTA   = $600F

; PCR_CB2_NEG     = $00000000
; PCR_CB2_INEG    = $00100000
; PCR_CB2_POS     = $01000000
; PCR_CB2_IPOS    = $01100000
; PCR_CB2_HOUT    = $10000000
; PCR_CB2_POUT    = $10100000
; PCR_CB2_LOUT    = $11000000
; PCR_CB2_HOUT    = $11100000

; PCR_CB1_NEG     = $00000000
; PCR_CB1_POS     = $00010000

; PCR_CA2_NEG     = $00000000
; PCR_CA2_INEG    = $00000010
; PCR_CA2_POS     = $00000100
; PCR_CA2_IPOS    = $00000110
; PCR_CA2_HOUT    = $00001000
; PCR_CA2_POUT    = $00001010
; PCR_CA2_LOUT    = $00001100
; PCR_CA2_HOUT    = $00001110

PCR_CA1_NEG     = $00000000
; PCR_CA1_POS     = $00000001

; IFR_IRQ         = %10000000
; IFR_T1          = %01000000
; IFR_T2          = %00100000
; IFR_CB1         = %00010000
; IFR_CB2         = %00001000
; IFR_SR          = %00000100
; IFR_CA1         = %00000010
; IFR_CA2         = %00000001

IER_ENABLE      = %10000000
; IER_DISABLE     = %00000000
; IER_ALL         = %01111111
; IER_T1          = %01000000
; IER_T2          = %00100000
; IER_CB1         = %00010000
; IER_CB2         = %00001000
; IER_SR          = %00000100
IER_CA1         = %00000010
; IER_CA2         = %00000001

VALUE   = $0200 ; 2 bytes
MOD10   = $0202 ; 2 bytes
MESSAGE = $0204 ; 6 bytes
COUNTER = $020A ; 2 bytes

LCD_E  = %10000000
LCD_RW = %01000000
LCD_RS = %00100000

;***************************************************************************************************
; ROM start

        .ORG $8000

START:
        LDX #$FF                        ; Initialize stack pointer
        TXS
        CLI                             ; Enable interrupts

        LDA #(IER_ENABLE|IER_CA1)       ; Enable interrupts for CA1
        STA IER
        LDA #PCR_CA1_NEG                ; Interrupt on negative active edge

        LDA #%11111111                  ; Set all eight pins of ORB to output
        STA DDRB

        LDA #%11100000                  ; Set top three pins of ORA to output
        STA DDRA

        LDA #%00111000                  ; Set 8-bit mode; 2-line display; 5x8 font
        JSR LCD_INSTRUCTION
        LDA #%00001110                  ; Display on; cursor on; blink off
        JSR LCD_INSTRUCTION
        LDA #%00000110                  ; Advancing cursor; no shifting
        JSR LCD_INSTRUCTION
        LDA #%00000001                  ; Clear display
        JSR LCD_INSTRUCTION

        LDA #0
        STA COUNTER
        STA COUNTER + 1

LOOP:
        LDA #%00000010                  ; Cursor home
        JSR LCD_INSTRUCTION

        LDA #0
        STA MESSAGE

        LDA COUNTER                     ; Initialize VALUE to the number to convert
        STA VALUE
        LDA COUNTER + 1
        STA VALUE + 1

DIVIDE:
        LDA #0                          ; Initialize the remainder to zero
        STA MOD10
        STA MOD10 + 1
        CLC

        LDX #16
DIVIDE_LOOP:
        ROL VALUE                       ; Rotate quotient and remainder
        ROL VALUE + 1
        ROL MOD10
        ROL MOD10 + 1

        SEC                             ; A,Y = dividend - divisor
        LDA MOD10
        SBC #10
        TAY                             ; Save low byte in Y
        LDA MOD10 + 1
        SBC #0
        BCC NEXT_DIVIDE                 ; Branch if dividend < divisor

        STY MOD10
        STA MOD10 + 1
NEXT_DIVIDE:
        DEX
        BNE DIVIDE_LOOP
        ROL VALUE                       ; Shift in the last bit of the quotient
        ROL VALUE + 1

        LDA MOD10
        CLC
        ADC #"0"
        JSR PUSH_CHARACTER

        LDA VALUE                       ; If value != 0; then continue dividing
        ORA VALUE + 1
        BNE DIVIDE

        LDX #0
PRINT_MESSAGE:
        LDA MESSAGE,X
        BEQ LOOP
        JSR PRINT_CHARACTER
        INX
        JMP PRINT_MESSAGE

PUSH_CHARACTER:                         ; Add character in A to beginning of NUL-terminated MESSAGE
        PHA                             ; Push new first character onto stack
        LDY #0

CHARACTER_LOOP:
        LDA MESSAGE,Y                   ; Get next character of string and put into X
        TAX
        PLA
        STA MESSAGE,Y                   ; Replace with character from stack
        INY
        TXA
        PHA                             ; Push character from string onto stack
        BNE CHARACTER_LOOP

        PLA
        STA MESSAGE,Y                   ; NUL-terminate MESSAGE

LCD_WAIT:
        PHA
        LDA #%00000000                  ; ORB is input
        STA DDRB
LCD_POLL:
        LDA #LCD_RW                     ; Set RW; Clear RS/E bits
        STA PORTA
        ORA #LCD_E                      ; Set E bit to send instruction
        STA PORTA
        LDA PORTB
        AND #%10000000                  ; Check busy flag
        BNE LCD_POLL

        LDA #LCD_RW                     ; Clear E bit
        STA PORTA
        LDA #%11111111                  ; ORB is output
        STA DDRB
        PLA
        RTS

LCD_INSTRUCTION:
        JSR LCD_WAIT
        STA PORTB
        LDA #0                          ; Clear RS/RW/E bits
        JSR LCD_SEND
        RTS

PRINT_CHARACTER:
        JSR LCD_WAIT
        STA PORTB
        LDA #LCD_RS                     ; Set RS; Clear RW/E bits
LCD_SEND:
        STA PORTA
        ORA #LCD_E                      ; Set E bit to send instruction
        STA PORTA
        EOR #LCD_E                      ; Clear E bit
        STA PORTA
        RTS

NMI:
IRQ:
        INC COUNTER
        BNE EXIT_IRQ
        INC COUNTER + 1
EXIT_IRQ:
        BIT PORTA                       ; Read ORA to clear CA1 interrupt
        RTI

;***************************************************************************************************
; Hardware vectors

        .ORG $FFFA
        .WORD NMI                       ; NMI vector
        .WORD START                     ; RESET vector
        .WORD IRQ                       ; IRQ/BRK vector
